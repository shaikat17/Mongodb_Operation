1. db.test.aggregate([
    { $match: { gender: "Male", age: { $lt: 30}}}, 
    {$project: {gender: 1, name: 1, age: 1}}])
2. db.test.aggregate([
    { $match: { gender: "Male"}},
    { $addFields: {course: "Level-2"}}
    ])            => Don't modify orginal data. Only add data on the pipeline
3. db.test.aggregate([
  { $match: { gender: "Male"}},
  { $addFields: {course: "Level-2", eduTech: "SM IT"}},
  { $project: {course: 1}},
  { $out: "level-2-students" }
])              => $out make new collection with $addFields based on $project condition
4. db.test.aggregate([
  { $match: { gender: "Male"}},
  { $addFields: {course: "Level-2", eduTech: "SM IT"}},
  { $merge: "test" }
])              => Will add new fields and value also modify the orginal collection
5. db.test.aggregate([
    { $group: { _id: "$gender", count: {$sum: 1}}}
])
6. db.test.aggregate([
    { $group: { _id: "$gender", count: {$sum: 1}, names: {$push: "$name"}}}
])
7. db.test.aggregate([
    { $group: { _id: "$gender", count: {$sum: 1}, names: {$push: "$$ROOT"}}}
])                    => will push full documents
8. db.test.aggregate([
    { $group: { _id: "$gender", count: {$sum: 1}, fullDoc: {$push: "$$ROOT"}}},
    { $project: { "fullDoc.name": 1, "fullDoc.phone": 1, "fullDoc.gender": 1 }
])
9. db.test.aggregate([
    { $group: { _id: null, totalSalary: { $sum: "$salary"}, maxSalary: { $max: "$salary"}, minSalary: { $min: "$salary"}, avgSalary: { $avg: "$salary"}}}
])
10. db.test.aggregate([
    { $unwind: "$friends"},
    { $group: { _id: "$friends", count: { $sum: 1}}}
    ])
11. db.test.aggregate([
    { $unwind: "$interests"},
    { $group: { _id: "$age", interestPerAge: {$push: "$interests" }, count: { $sum: 1}}}
    ])
12. db.test.aggregate([
    { $bucket: {
          groupBy: "$age",
          boundaries: [ 20, 40, 60 ],
          default: "More than 60",
          output: {
            "count": { $sum: 1 },
            names: { $push: "$name" }
          }
        } },
        { $sort: {count: 1} }
    ])
13. 
